// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/sql/001_create_users_table.sql

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsSql001createuserstablesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x4e\xeb\x30\x10\x46\xf7\x7e\x8a\x4f\xd9\xf4\x5e\x41\x9e\xa0" +
	"\xab\x40\x8d\x14\x91\xfe\x90\xb8\x52\xbb\xaa\x4c\x3c\xa5\x16\x8e\x6d\xd9\x8e\xc2\xe3\xa3\x14\xd1\x76\x11\x10\xdb" +
	"\x39\x67\x34\xd2\x99\x3c\xc7\x5d\xa7\xdf\x82\x4c\x84\xad\x67\x79\x8e\xe6\xa5\x82\xb6\x88\xd4\x26\xed\x2c\x66\x5b" +
	"\x3f\x83\x8e\xa0\x0f\x6a\xfb\x44\x0a\xc3\x89\x2c\xd2\x49\x47\x7c\xed\x8d\x92\x8e\x90\xde\x1b\x4d\x8a\x3d\xd6\xbc" +
	"\x10\x1c\xa2\x78\xa8\x38\xca\x27\xac\xd6\x02\x7c\x57\x36\xa2\x41\x1f\x29\x44\xfc\x63\x40\xa6\x55\x86\x86\xd7\x65" +
	"\x51\x9d\x85\xd5\xb6\xaa\xb0\xa9\xcb\x65\x51\xef\xf1\xcc\xf7\xf7\xa3\x73\xd4\x21\xa6\x83\x95\x1d\x65\x10\x7c\x27" +
	"\x2e\xe6\x99\x1a\xf9\x0b\xa4\x4e\x6a\x33\x05\xbc\x8c\x71\x70\x41\x4d\xb1\xd6\xd9\xa3\x0e\xdd\x14\x0a\xce\x4c\xde" +
	"\x69\x03\xc9\x44\xea\x20\x53\x06\x51\x2e\x79\x23\x8a\xe5\xe6\x8a\x7b\xaf\x7e\xc0\xec\xff\x1c\x60\xec\xb6\xfe\xc2" +
	"\x0d\xf6\xbb\xff\x25\xfe\x38\xfc\x53\xfe\xe0\x8c\x21\x85\x57\xd9\xbe\xb3\x45\xbd\xde\x5c\x1f\x70\x1b\x7f\xce\x3e" +
	"\x03\x00\x00\xff\xff\xee\xa0\xaa\xdb\xf0\x01\x00\x00")

func bindataAssetsSql001createuserstablesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsSql001createuserstablesql,
		"assets/sql/001_create_users_table.sql",
	)
}



func bindataAssetsSql001createuserstablesql() (*asset, error) {
	bytes, err := bindataAssetsSql001createuserstablesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/sql/001_create_users_table.sql",
		size: 496,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1556075581, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/sql/001_create_users_table.sql": bindataAssetsSql001createuserstablesql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"sql": {Func: nil, Children: map[string]*bintree{
			"001_create_users_table.sql": {Func: bindataAssetsSql001createuserstablesql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
